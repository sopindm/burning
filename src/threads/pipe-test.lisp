(in-package :burning-threads-test)

(defcase pipe-test)

(deftest pipe-test one-to-one-pipe ()
  (let ((read ())
	(pipe (make-pipe)))
    (flet ((producer ()
	     (dotimes (i 100)
	       (write-pipe pipe i)))
	   (consumer ()
	     (dotimes (i 100)
	       (push (read-pipe pipe) read))))
      (wait-threads (spawn-thread #'consumer)
		    (spawn-thread #'producer)))
    (!equal read (range 0 99 :accending nil))))

(deftest pipe-test multi-user-pipe ()
  (let ((read (make-shared-variable 0))
	(written (make-shared-variable 0))
	(pipe (make-pipe)))
    (flet ((producer ()
	     (dotimes (i 10)
	       (thread-random)
	       (let ((value (random 100)))
		 (write-pipe pipe value)
		 (with-shared-variable written
		   (incf written value)))))
	   (consumer ()
	     (dotimes (i 10)
	       (thread-random)
	       (let ((value (read-pipe pipe)))
		 (with-shared-variable read
		   (incf read value))))))
      (let ((threads ()))
	(dotimes (i 500)
	  (push (spawn-thread #'producer) threads)
	  (push (spawn-thread #'consumer) threads))
	(apply #'wait-threads threads)))
    (with-shared-variables (read written)
      (!= read written))))

(deftest pipe-test server-pipe ()
  (let ((read (make-shared-variable 0))
	(written (make-shared-variable 0))
	(connection-pipe (make-pipe)))
    (flet ((client (times)
	     (with-pipe pipe
	       (write-pipe connection-pipe pipe)
	       (dotimes (i times)
		 (thread-random)
		 (let ((value (random 100)))
		   (with-shared-variable written
		     (incf written value))
		   (write-pipe pipe value)))))
	   (server ()
	     (let ((pipe (read-pipe connection-pipe)))
	       (while-pipe (value pipe)
		 (thread-random)
		 (with-shared-variable read
		   (incf read value))))))
      (let ((threads ()))
	(dotimes (i 500)
	  (push (spawn-thread #'client (random 50)) threads)
	  (push (spawn-thread #'server) threads))
	(apply #'wait-threads threads))
      (with-shared-variables (read written)
	(!= read written)))))