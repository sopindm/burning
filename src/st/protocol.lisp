(in-package #:burning-st)

(defun make-protocol (filename)
  (generate-protocol (burning-filesystem:path-from-string filename) 
					 'message 'request 'login  'game-request 'tap 'use-active-item 'ready 'buy-item 'move-item
					 'response 'error 'item 'inventory-item 'inventory 'shop-item 'shop-info 'game-event 'changer-used
					 'idol-taken 'door-state 'player-result 'level-result 'player-left 'player-joined 'exit 'button 
					 'wall 'door 'idol 'game-state 'game-state-update 'game-item 'player 'timer))

(defmessage message ()
  (:enum type
		 (game-state 0)
		 (timer 2)
		 (time-sync 9)
		 (game-state-update 10)
		 (response 16)
		 (game-event 24)
		 (request 25))
  (type 1 type)
  (player-id 3 :int32 :optional t)
  (time 2 :int64 :optional t) 
  (game-state 4 game-state :optional t)
  (timer 6 timer :optional t)
  (game-state-update 11 game-state-update :optional t)
  (response 15 response :optional t)
  (game-event 24 game-event :optional t)
  (requests 22 request :repeated t))

(defmessage request ()
  (:enum type
		 (login 0)
		 (game-request 1)
		 (ready 2)
		 (buy-item 3)
		 (move-item 4)
		 (get-shop 6)
		 (get-inventory 7)
		 (logout 8)
		 (get-profile 9))
  (type 1 type)
  (login 2 login :optional t)
  (game-request 3 game-request :optional t)
  (ready 4 ready :optional t)
  (buy-item 5 buy-item :optional t)
  (move-item 6 move-item :optional t))

(defmessage login ()
  (name 1 :string))

(defmessage game-request ()
  (:enum type
		 (tap 0)
		 (use-active-item 5)
		 (leave-game 10))
  (request-id 1 :int64)
  (type 2 type)
  (tap 3 tap :optional t)
  (use-active-item 4 use-active-item :optional t)
  (time 5 :int64))

(defmessage tap ()
  (player-id 1 :int32)
  (tap-x 2 :float)
  (tap-y 3 :float))

(defmessage use-active-item ()
  (slot-id 1 :int32))

(defmessage ready ()
  (:enum game-type
		 (two-player 0)
		 (three-player 1)
		 (one-player 2))
  (ready 1 :bool)
  (type 2 game-type))

(defmessage buy-item ()
  (item 1 item))
  
(defmessage move-item ()
  (inventory-slot 1 :int32)
  (active-slot 2 :int32 :optional t)
  (passive-slot 3 :int32 :optional t))

(defmessage response ()
  (status 1 :bool)
  (error 2 error :optional t)
  (request 3 request)
  (item-used 4 item :optional t)
  (shop-info 5 shop-info :optional t)
  (inventory 6 inventory :optional t)
  (profile 7 player :optional t))

(defmessage error ()
  (:enum error-type
		 (no-game 0)
		 (must-login 1)
		 (no-item-available 2)
		 (not-enough-money 3)
		 (need-higher-level 4)
		 (too-many-items 5)
		 (bad-move 6))
  (type 1 error-type)
  (description 2 :string :optional t))

(defmessage item ()
  (:enum item-type
		 (weight 0)
		 (trap 1)
		 (changer 2)
		 (none 3)
		 (speed-amulet 4)
		 (endurance-amulet 5)
		 (protection-amulet 6)
		 (greed-amulet 7)
		 (pockets-amulet 8))
  (item-type 1 item-type))

(defmessage inventory-item ()
  (item 1 item)
  (inventory-position 2 :int32))
  
(defmessage inventory ()
  (items 1 inventory-item :repeated t)
  (active 2 inventory-item :repeated t)
  (passive 3 inventory-item :repeated t))

(defmessage shop-item ()
  (item 1 item)
  (price 2 :int32)
  (min-level 3 :int32))

(defmessage shop-info ()
  (item-descriptions 1 shop-item :repeated t))

(defmessage game-event ()
  (:enum type
		 (changer-used 0)
		 (idol-taken 1)
		 (door-state 2)
		 (level-result 3)
		 (player-left 4)
		 (player-joined 5))
  (type 1 type)
  (changer-used 2 changer-used :optional t)
  (idol-taken 3 idol-taken :optional t)
  (door-state 4 door-state :optional t)
  (level-result 5 level-result :optional t)
  (player-left 6 player-left :optional t)
  (player-joined 7 player-joined :optional t))
  
(defmessage changer-used ()
  (id1 1 :int32)
  (id2 2 :int32))

(defmessage idol-taken ()
  (idol-id 1 :int32)
  (player-id 2 :int32))

(defmessage door-state ()
  (id 1 :int32)
  (is-open 2 :bool))

(defmessage player-result ()
  (id 1 :int32)
  (money 2 :int32))

(defmessage level-result ()
  (show-result-screen 1 :bool)
  (results 2 player-result :repeated t))

(defmessage player-left ()
  (player-id 1 :int32))

(defmessage player-joined ()
  (player 1 player))

(defmessage exit ()
  (x 1 :float)
  (y 2 :float)
  (width 3 :float)
  (height 4 :float))

(defmessage button ()
  (x 1 :float)
  (y 2 :float)
  (width 3 :float)
  (height 4 :float))

(defmessage wall ()
  (x 1 :float)
  (y 2 :float)
  (width 3 :float)
  (height 4 :float))

(defmessage door ()
  (id 1 :int32)
  (x 2 :float)
  (y 3 :float)
  (width 4 :float)
  (height 5 :float))

(defmessage idol ()
  (id 1 :int32)
  (x 2 :float)
  (y 3 :float))

(defmessage game-state ()
  (title 1 :string)
  (your-id 2 :int32)
  (min-players 3 :int32)
  (exit 4 exit)
  (players 6 player :repeated t)
  (buttons 7 button :repeated t)
  (walls 8 wall :repeated t)
  (doors 9 door :repeated t)
  (idols 10 idol :repeated t))

(defmessage game-state-update ()
  (players 1 player :repeated t)
  (items 2 game-item :repeated t))

(defmessage game-item ()
  (item 1 item)
  (x 2 :float :optional t)
  (y 3 :float :optional t))

(defmessage player ()
  (id 1 :int32)
  (x 2 :float :optional t)
  (y 3 :float :optional t)
  (tap-x 4 :float :optional t)
  (tap-y 5 :float :optional t)
  (name 6 :string :optional t)
  (money 7 :int32 :optional t)
  (exp 9 :int64 :optional t)
  (level 10 :int32 :optional t)
  (trap-time-remaining 11 :int64 :optional t)
  (last-processed-request-id 12 :int64 :optional t))

(defmessage timer ()
  (timer 1 :int64))

