(in-package #:burning-cgen)
(in-language :c)

(def-cg-macro let (forms &rest body)
  (flet ((make-definition (form)
	   (let ((symbol (if (listp form) (first form) form))
		 (value (if (listp form) (second form) :not-set)))
	     `(define ,symbol ,@(if (not (eq value :not-set)) `(,value))))))
  `(progn ,@(mapcar #'make-definition forms)
     ,@body)))

(def-cg-macro for (forms &rest body)
  (labels ((parse-form (name &key from to downto lessto moreto step)
	     (list `(,name ,from ,(aif (cond (to `(incf ,name))
					     (downto `(decf ,name))
					     (lessto `(incf ,name))
					     (moreto `(decf ,name)))
				       (append it (aif step (list it)))))
		   (acond (to `(<= ,name ,it))
			  (downto `(>= ,name ,it))
			  (lessto `(< ,name ,it))
			  (moreto `(> ,name ,it)))))
	   (parse-forms (forms)
	     (let ((parsed (mapcar #'(lambda (form) (apply #'parse-form form)) forms)))
	       (list (remove-if #'null (mapcar #'first parsed))
		     (remove-if #'null (mapcar #'second parsed))))))
    `(do ,@(parse-forms forms) ,@body)))

(def-cg-macro do (setup-forms exit-forms &rest body)
  (flet ((comma-expression (exprs)
	   (cond ((= (length exprs) 0) ())
		 ((> (length exprs) 1) `(comma ,@exprs))
		 (t (first exprs)))))
    `(progn ,@(mapcar #'(lambda (form) `(define ,(first form))) setup-forms)
	    (c-for (,(comma-expression (mapcar #'(lambda (form) `(setf ,(first form) ,(second form))) setup-forms))
		    ,(comma-expression exit-forms)
		    ,(comma-expression (remove-if #'null (mapcar #'(lambda (form)
								     `(symbol-macrolet ((it ',(first form)))
									,(third form)))
								 setup-forms))))
		   ,@body))))
		  
	