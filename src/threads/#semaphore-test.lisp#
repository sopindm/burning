(in-package :burning-threads-test)

(defcase semaphore-test)

(deftest semaphore-test simple-semaphore ()
  (let ((producter-result 0)
	(consumer-result 0)
	(work-queue (make-array 10))
	(full-semaphore (make-semaphore 10))
	(empty-semaphore (make-semaphore 0)))
    (flet ((producter ()
	     (dotimes (i 100)
	       (thread-random)
	       (wait-semaphore full-semaphore)
	       (thread-random)
	       (let ((value (random 100)))
		 (setf (aref work-queue (mod i 10)) value)
		 (incf producter-result value))
	       (signal-semaphore empty-semaphore)))
	   (consumer ()
	     (dotimes (i 100)
	       (thread-random)
	       (wait-semaphore empty-semaphore)
	       (thread-random)
	       (incf consumer-result (aref work-queue (mod i 10)))
	       (signal-semaphore full-semaphore))))
      (let ((p-thread (spawn-thread #'producter))
	    (c-thread (spawn-thread #'consumer)))
	(wait-threads p-thread c-thread)
	(!= producter-result consumer-result)))))

(deftest semaphore-test trains-test ()
  (let ((semaphore (make-semaphore 0))
	(threads ()))
    (flet ((train ()
	     (dotimes (i 100)
	       (wait-semaphore semaphore)))
	   (dispather ()
	     (dotimes (i 100)
	       (signal-semaphore semaphore))))
      (dotimes (i 1)
	(push (spawn-thread #'train) threads)
	(push (spawn-thread #'dispather) threads))
      (apply #'wait-threads threads))))

      
    